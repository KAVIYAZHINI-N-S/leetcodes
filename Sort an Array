import java.util.*;
import java.io.*;
class Solution {
    public int[] sortArray(int[] nums) {
        heapSort(nums);
        return nums;
    }

    private void heapSort(int[] nums) {
        int n = nums.length;

        // Build a max heap.
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(nums, n, i);
        }

        // Extract elements from heap one by one.
        for (int i = n - 1; i > 0; i--) {
            // Move current root to end.
            swap(nums, 0, i);

            // Call heapify on the reduced heap.
            heapify(nums, i, 0);
        }
    }

    private void heapify(int[] nums, int n, int i) {
        int largest = i; // Initialize largest as root.
        int left = 2 * i + 1; // left child.
        int right = 2 * i + 2; // right child.

        // If left child is larger than root.
        if (left < n && nums[left] > nums[largest]) {
            largest = left;
        }

        // If right child is larger than largest so far.
        if (right < n && nums[right] > nums[largest]) {
            largest = right;
        }

        // If largest is not root.
        if (largest != i) {
            swap(nums, i, largest);

            // Recursively heapify the affected sub-tree.
            heapify(nums, n, largest);
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public static void main(String[] args) {
        Scanner st = new Scanner(System.in);
        int n = st.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = st.nextInt();
        }
        Solution solution = new Solution();
        int[] sortedArr = solution.sortArray(nums);
        for (int num : sortedArr) {
            System.out.print(num + " ");
        }
    }
}
